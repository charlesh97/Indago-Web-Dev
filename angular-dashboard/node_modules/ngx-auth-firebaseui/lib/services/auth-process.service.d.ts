import { EventEmitter } from '@angular/core';
import { AngularFireAuth } from '@angular/fire/auth';
import '@firebase/auth';
import { User, UserInfo } from 'firebase/app';
import { Observable } from 'rxjs';
import { FirestoreSyncService } from './firestore-sync.service';
import { MatSnackBar, MatSnackBarConfig } from '@angular/material/snack-bar';
import { ICredentials, ISignInProcess, ISignUpProcess, NgxAuthFirebaseUIConfig } from '../interfaces';
import UserCredential = firebase.auth.UserCredential;
import * as ɵngcc0 from '@angular/core';
export declare const facebookAuthProvider: import("@firebase/auth-types").FacebookAuthProvider;
export declare const googleAuthProvider: import("@firebase/auth-types").GoogleAuthProvider;
export declare const appleAuthProvider: import("@firebase/auth-types").OAuthProvider;
export declare const twitterAuthProvider: import("@firebase/auth-types").TwitterAuthProvider;
export declare const githubAuthProvider: import("@firebase/auth-types").GithubAuthProvider;
export declare const microsoftAuthProvider: import("@firebase/auth-types").OAuthProvider;
export declare const yahooAuthProvider: import("@firebase/auth-types").OAuthProvider;
export declare enum AuthProvider {
    ALL = "all",
    ANONYMOUS = "anonymous",
    EmailAndPassword = "firebase",
    Google = "google",
    Apple = "apple",
    Facebook = "facebook",
    Twitter = "twitter",
    Github = "github",
    Microsoft = "microsoft",
    Yahoo = "yahoo",
    PhoneNumber = "phoneNumber"
}
export declare class AuthProcessService implements ISignInProcess, ISignUpProcess {
    afa: AngularFireAuth;
    config: NgxAuthFirebaseUIConfig;
    private snackBar;
    private fireStoreService;
    private matSnackBarConfig;
    onSuccessEmitter: EventEmitter<any>;
    onErrorEmitter: EventEmitter<any>;
    private _user$;
    get user$(): Observable<firebase.User | null>;
    /**
     * @deprecated access via user$ asynchronously instead
     */
    user: User;
    messageOnAuthSuccess: string;
    messageOnAuthError: string;
    emailConfirmationSent: boolean;
    emailToConfirm: string;
    constructor(afa: AngularFireAuth, config: NgxAuthFirebaseUIConfig, snackBar: MatSnackBar, fireStoreService: FirestoreSyncService, matSnackBarConfig: MatSnackBarConfig);
    listenToUserEvents(): void;
    /**
     * Reset the password of the ngx-auth-firebaseui-user via email
     *
     * @param email - the email to reset
     */
    resetPassword(email: string): Promise<void>;
    /**
     * General sign in mechanism to authenticate the users with a firebase project
     * using a traditional way, via username and password or by using an authentication provider
     * like google, facebook, twitter and github
     *
     * @param provider - the provider to authenticate with (google, facebook, twitter, github)
     * @param credentials optional email and password
     */
    signInWith(provider: AuthProvider, credentials?: ICredentials): Promise<void>;
    /**
     * Sign up new users via email and password.
     * After that the ngx-auth-firebaseui-user should verify and confirm an email sent via the firebase
     *
     * @param displayName - the displayName if the new ngx-auth-firebaseui-user
     * @param credentials email and password
     * @returns -
     */
    signUp(displayName: string, credentials: ICredentials): Promise<void>;
    sendNewVerificationEmail(): Promise<void | never>;
    signOut(): Promise<void>;
    /**
     * Update the profile (name + photo url) of the authenticated ngx-auth-firebaseui-user in the
     * firebase authentication feature (not in firestore)
     *
     * @param name - the new name of the authenticated ngx-auth-firebaseui-user
     * @param photoURL - the new photo url of the authenticated ngx-auth-firebaseui-user
     * @returns -
     */
    updateProfile(name: string, photoURL: string): Promise<void>;
    parseUserInfo(user: User): UserInfo;
    getUserPhotoUrl(): Observable<string | null>;
    getPhotoPath(image: string): string;
    signInWithPhoneNumber(): void;
    handleSuccess(userCredential: UserCredential): Promise<void>;
    handleError(error: any): void;
    reloadUserInfo(): import("rxjs").Subscription;
    getMessageOnAuthError(error: any): any;
    showToast(message: string): void;
    showErrorToast(error: any): void;
    notifyError(error: any): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<AuthProcessService, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXV0aC1wcm9jZXNzLnNlcnZpY2UuZC50cyIsInNvdXJjZXMiOlsiYXV0aC1wcm9jZXNzLnNlcnZpY2UuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFDQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEV2ZW50RW1pdHRlciB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQW5ndWxhckZpcmVBdXRoIH0gZnJvbSAnQGFuZ3VsYXIvZmlyZS9hdXRoJztcbmltcG9ydCAnQGZpcmViYXNlL2F1dGgnO1xuaW1wb3J0IHsgVXNlciwgVXNlckluZm8gfSBmcm9tICdmaXJlYmFzZS9hcHAnO1xuaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgRmlyZXN0b3JlU3luY1NlcnZpY2UgfSBmcm9tICcuL2ZpcmVzdG9yZS1zeW5jLnNlcnZpY2UnO1xuaW1wb3J0IHsgTWF0U25hY2tCYXIsIE1hdFNuYWNrQmFyQ29uZmlnIH0gZnJvbSAnQGFuZ3VsYXIvbWF0ZXJpYWwvc25hY2stYmFyJztcbmltcG9ydCB7IElDcmVkZW50aWFscywgSVNpZ25JblByb2Nlc3MsIElTaWduVXBQcm9jZXNzLCBOZ3hBdXRoRmlyZWJhc2VVSUNvbmZpZyB9IGZyb20gJy4uL2ludGVyZmFjZXMnO1xuaW1wb3J0IFVzZXJDcmVkZW50aWFsID0gZmlyZWJhc2UuYXV0aC5Vc2VyQ3JlZGVudGlhbDtcbmV4cG9ydCBkZWNsYXJlIGNvbnN0IGZhY2Vib29rQXV0aFByb3ZpZGVyOiBpbXBvcnQoXCJAZmlyZWJhc2UvYXV0aC10eXBlc1wiKS5GYWNlYm9va0F1dGhQcm92aWRlcjtcbmV4cG9ydCBkZWNsYXJlIGNvbnN0IGdvb2dsZUF1dGhQcm92aWRlcjogaW1wb3J0KFwiQGZpcmViYXNlL2F1dGgtdHlwZXNcIikuR29vZ2xlQXV0aFByb3ZpZGVyO1xuZXhwb3J0IGRlY2xhcmUgY29uc3QgYXBwbGVBdXRoUHJvdmlkZXI6IGltcG9ydChcIkBmaXJlYmFzZS9hdXRoLXR5cGVzXCIpLk9BdXRoUHJvdmlkZXI7XG5leHBvcnQgZGVjbGFyZSBjb25zdCB0d2l0dGVyQXV0aFByb3ZpZGVyOiBpbXBvcnQoXCJAZmlyZWJhc2UvYXV0aC10eXBlc1wiKS5Ud2l0dGVyQXV0aFByb3ZpZGVyO1xuZXhwb3J0IGRlY2xhcmUgY29uc3QgZ2l0aHViQXV0aFByb3ZpZGVyOiBpbXBvcnQoXCJAZmlyZWJhc2UvYXV0aC10eXBlc1wiKS5HaXRodWJBdXRoUHJvdmlkZXI7XG5leHBvcnQgZGVjbGFyZSBjb25zdCBtaWNyb3NvZnRBdXRoUHJvdmlkZXI6IGltcG9ydChcIkBmaXJlYmFzZS9hdXRoLXR5cGVzXCIpLk9BdXRoUHJvdmlkZXI7XG5leHBvcnQgZGVjbGFyZSBjb25zdCB5YWhvb0F1dGhQcm92aWRlcjogaW1wb3J0KFwiQGZpcmViYXNlL2F1dGgtdHlwZXNcIikuT0F1dGhQcm92aWRlcjtcbmV4cG9ydCBkZWNsYXJlIGVudW0gQXV0aFByb3ZpZGVyIHtcbiAgICBBTEwgPSBcImFsbFwiLFxuICAgIEFOT05ZTU9VUyA9IFwiYW5vbnltb3VzXCIsXG4gICAgRW1haWxBbmRQYXNzd29yZCA9IFwiZmlyZWJhc2VcIixcbiAgICBHb29nbGUgPSBcImdvb2dsZVwiLFxuICAgIEFwcGxlID0gXCJhcHBsZVwiLFxuICAgIEZhY2Vib29rID0gXCJmYWNlYm9va1wiLFxuICAgIFR3aXR0ZXIgPSBcInR3aXR0ZXJcIixcbiAgICBHaXRodWIgPSBcImdpdGh1YlwiLFxuICAgIE1pY3Jvc29mdCA9IFwibWljcm9zb2Z0XCIsXG4gICAgWWFob28gPSBcInlhaG9vXCIsXG4gICAgUGhvbmVOdW1iZXIgPSBcInBob25lTnVtYmVyXCJcbn1cbmV4cG9ydCBkZWNsYXJlIGNsYXNzIEF1dGhQcm9jZXNzU2VydmljZSBpbXBsZW1lbnRzIElTaWduSW5Qcm9jZXNzLCBJU2lnblVwUHJvY2VzcyB7XG4gICAgYWZhOiBBbmd1bGFyRmlyZUF1dGg7XG4gICAgY29uZmlnOiBOZ3hBdXRoRmlyZWJhc2VVSUNvbmZpZztcbiAgICBwcml2YXRlIHNuYWNrQmFyO1xuICAgIHByaXZhdGUgZmlyZVN0b3JlU2VydmljZTtcbiAgICBwcml2YXRlIG1hdFNuYWNrQmFyQ29uZmlnO1xuICAgIG9uU3VjY2Vzc0VtaXR0ZXI6IEV2ZW50RW1pdHRlcjxhbnk+O1xuICAgIG9uRXJyb3JFbWl0dGVyOiBFdmVudEVtaXR0ZXI8YW55PjtcbiAgICBwcml2YXRlIF91c2VyJDtcbiAgICBnZXQgdXNlciQoKTogT2JzZXJ2YWJsZTxmaXJlYmFzZS5Vc2VyIHwgbnVsbD47XG4gICAgLyoqXG4gICAgICogQGRlcHJlY2F0ZWQgYWNjZXNzIHZpYSB1c2VyJCBhc3luY2hyb25vdXNseSBpbnN0ZWFkXG4gICAgICovXG4gICAgdXNlcjogVXNlcjtcbiAgICBtZXNzYWdlT25BdXRoU3VjY2Vzczogc3RyaW5nO1xuICAgIG1lc3NhZ2VPbkF1dGhFcnJvcjogc3RyaW5nO1xuICAgIGVtYWlsQ29uZmlybWF0aW9uU2VudDogYm9vbGVhbjtcbiAgICBlbWFpbFRvQ29uZmlybTogc3RyaW5nO1xuICAgIGNvbnN0cnVjdG9yKGFmYTogQW5ndWxhckZpcmVBdXRoLCBjb25maWc6IE5neEF1dGhGaXJlYmFzZVVJQ29uZmlnLCBzbmFja0JhcjogTWF0U25hY2tCYXIsIGZpcmVTdG9yZVNlcnZpY2U6IEZpcmVzdG9yZVN5bmNTZXJ2aWNlLCBtYXRTbmFja0JhckNvbmZpZzogTWF0U25hY2tCYXJDb25maWcpO1xuICAgIGxpc3RlblRvVXNlckV2ZW50cygpOiB2b2lkO1xuICAgIC8qKlxuICAgICAqIFJlc2V0IHRoZSBwYXNzd29yZCBvZiB0aGUgbmd4LWF1dGgtZmlyZWJhc2V1aS11c2VyIHZpYSBlbWFpbFxuICAgICAqXG4gICAgICogQHBhcmFtIGVtYWlsIC0gdGhlIGVtYWlsIHRvIHJlc2V0XG4gICAgICovXG4gICAgcmVzZXRQYXNzd29yZChlbWFpbDogc3RyaW5nKTogUHJvbWlzZTx2b2lkPjtcbiAgICAvKipcbiAgICAgKiBHZW5lcmFsIHNpZ24gaW4gbWVjaGFuaXNtIHRvIGF1dGhlbnRpY2F0ZSB0aGUgdXNlcnMgd2l0aCBhIGZpcmViYXNlIHByb2plY3RcbiAgICAgKiB1c2luZyBhIHRyYWRpdGlvbmFsIHdheSwgdmlhIHVzZXJuYW1lIGFuZCBwYXNzd29yZCBvciBieSB1c2luZyBhbiBhdXRoZW50aWNhdGlvbiBwcm92aWRlclxuICAgICAqIGxpa2UgZ29vZ2xlLCBmYWNlYm9vaywgdHdpdHRlciBhbmQgZ2l0aHViXG4gICAgICpcbiAgICAgKiBAcGFyYW0gcHJvdmlkZXIgLSB0aGUgcHJvdmlkZXIgdG8gYXV0aGVudGljYXRlIHdpdGggKGdvb2dsZSwgZmFjZWJvb2ssIHR3aXR0ZXIsIGdpdGh1YilcbiAgICAgKiBAcGFyYW0gY3JlZGVudGlhbHMgb3B0aW9uYWwgZW1haWwgYW5kIHBhc3N3b3JkXG4gICAgICovXG4gICAgc2lnbkluV2l0aChwcm92aWRlcjogQXV0aFByb3ZpZGVyLCBjcmVkZW50aWFscz86IElDcmVkZW50aWFscyk6IFByb21pc2U8dm9pZD47XG4gICAgLyoqXG4gICAgICogU2lnbiB1cCBuZXcgdXNlcnMgdmlhIGVtYWlsIGFuZCBwYXNzd29yZC5cbiAgICAgKiBBZnRlciB0aGF0IHRoZSBuZ3gtYXV0aC1maXJlYmFzZXVpLXVzZXIgc2hvdWxkIHZlcmlmeSBhbmQgY29uZmlybSBhbiBlbWFpbCBzZW50IHZpYSB0aGUgZmlyZWJhc2VcbiAgICAgKlxuICAgICAqIEBwYXJhbSBkaXNwbGF5TmFtZSAtIHRoZSBkaXNwbGF5TmFtZSBpZiB0aGUgbmV3IG5neC1hdXRoLWZpcmViYXNldWktdXNlclxuICAgICAqIEBwYXJhbSBjcmVkZW50aWFscyBlbWFpbCBhbmQgcGFzc3dvcmRcbiAgICAgKiBAcmV0dXJucyAtXG4gICAgICovXG4gICAgc2lnblVwKGRpc3BsYXlOYW1lOiBzdHJpbmcsIGNyZWRlbnRpYWxzOiBJQ3JlZGVudGlhbHMpOiBQcm9taXNlPHZvaWQ+O1xuICAgIHNlbmROZXdWZXJpZmljYXRpb25FbWFpbCgpOiBQcm9taXNlPHZvaWQgfCBuZXZlcj47XG4gICAgc2lnbk91dCgpOiBQcm9taXNlPHZvaWQ+O1xuICAgIC8qKlxuICAgICAqIFVwZGF0ZSB0aGUgcHJvZmlsZSAobmFtZSArIHBob3RvIHVybCkgb2YgdGhlIGF1dGhlbnRpY2F0ZWQgbmd4LWF1dGgtZmlyZWJhc2V1aS11c2VyIGluIHRoZVxuICAgICAqIGZpcmViYXNlIGF1dGhlbnRpY2F0aW9uIGZlYXR1cmUgKG5vdCBpbiBmaXJlc3RvcmUpXG4gICAgICpcbiAgICAgKiBAcGFyYW0gbmFtZSAtIHRoZSBuZXcgbmFtZSBvZiB0aGUgYXV0aGVudGljYXRlZCBuZ3gtYXV0aC1maXJlYmFzZXVpLXVzZXJcbiAgICAgKiBAcGFyYW0gcGhvdG9VUkwgLSB0aGUgbmV3IHBob3RvIHVybCBvZiB0aGUgYXV0aGVudGljYXRlZCBuZ3gtYXV0aC1maXJlYmFzZXVpLXVzZXJcbiAgICAgKiBAcmV0dXJucyAtXG4gICAgICovXG4gICAgdXBkYXRlUHJvZmlsZShuYW1lOiBzdHJpbmcsIHBob3RvVVJMOiBzdHJpbmcpOiBQcm9taXNlPHZvaWQ+O1xuICAgIHBhcnNlVXNlckluZm8odXNlcjogVXNlcik6IFVzZXJJbmZvO1xuICAgIGdldFVzZXJQaG90b1VybCgpOiBPYnNlcnZhYmxlPHN0cmluZyB8IG51bGw+O1xuICAgIGdldFBob3RvUGF0aChpbWFnZTogc3RyaW5nKTogc3RyaW5nO1xuICAgIHNpZ25JbldpdGhQaG9uZU51bWJlcigpOiB2b2lkO1xuICAgIGhhbmRsZVN1Y2Nlc3ModXNlckNyZWRlbnRpYWw6IFVzZXJDcmVkZW50aWFsKTogUHJvbWlzZTx2b2lkPjtcbiAgICBoYW5kbGVFcnJvcihlcnJvcjogYW55KTogdm9pZDtcbiAgICByZWxvYWRVc2VySW5mbygpOiBpbXBvcnQoXCJyeGpzXCIpLlN1YnNjcmlwdGlvbjtcbiAgICBnZXRNZXNzYWdlT25BdXRoRXJyb3IoZXJyb3I6IGFueSk6IGFueTtcbiAgICBzaG93VG9hc3QobWVzc2FnZTogc3RyaW5nKTogdm9pZDtcbiAgICBzaG93RXJyb3JUb2FzdChlcnJvcjogYW55KTogdm9pZDtcbiAgICBub3RpZnlFcnJvcihlcnJvcjogYW55KTogdm9pZDtcbn1cbiJdfQ==