import { EventEmitter, OnDestroy, OnInit } from '@angular/core';
import { FormBuilder, FormGroup, ValidatorFn } from '@angular/forms';
import { Subscription } from 'rxjs';
import { AuthProcessService } from '../../services/auth-process.service';
import { MatFormFieldAppearance } from '@angular/material/form-field';
import { ThemePalette } from '@angular/material/core';
import * as ɵngcc0 from '@angular/core';
export declare const confirmPasswordValidator: ValidatorFn;
export declare class NgxAuthFirebaseuiRegisterComponent implements OnInit, OnDestroy {
    private platformId;
    private formBuilder;
    authProcess: AuthProcessService;
    logoUrl: string;
    appearance: MatFormFieldAppearance;
    tosUrl: string;
    privacyPolicyUrl: string;
    titleText: string;
    readAndAcceptText: string;
    termsAndConditionsText: string;
    privacyPolicyText: string;
    createAccountButtonText: string;
    alreadyHaveAccountText: string;
    loginButtonText: string;
    nameText: string;
    nameErrorRequiredText: string;
    emailText: string;
    emailErrorRequiredText: string;
    emailErrorPatternText: string;
    passwordText: string;
    passwordErrorRequiredText: string;
    passwordConfirmationText: string;
    passwordConfirmationErrorRequiredText: string;
    passwordErrorMatchText: string;
    onSuccess: any;
    onError: any;
    onLoginRequested: EventEmitter<void>;
    registerForm: FormGroup;
    onErrorSubscription: Subscription;
    authenticationError: boolean;
    private unsubscribeAll;
    constructor(platformId: Object, formBuilder: FormBuilder, authProcess: AuthProcessService);
    get color(): string | ThemePalette;
    get colorAccent(): string | ThemePalette;
    ngOnInit(): void;
    /**
     * On destroy
     */
    ngOnDestroy(): void;
    createAccount(): Promise<void>;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<NgxAuthFirebaseuiRegisterComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<NgxAuthFirebaseuiRegisterComponent, "ngx-auth-firebaseui-register", never, { "titleText": "titleText"; "readAndAcceptText": "readAndAcceptText"; "termsAndConditionsText": "termsAndConditionsText"; "privacyPolicyText": "privacyPolicyText"; "createAccountButtonText": "createAccountButtonText"; "alreadyHaveAccountText": "alreadyHaveAccountText"; "loginButtonText": "loginButtonText"; "nameText": "nameText"; "nameErrorRequiredText": "nameErrorRequiredText"; "emailText": "emailText"; "emailErrorRequiredText": "emailErrorRequiredText"; "emailErrorPatternText": "emailErrorPatternText"; "passwordText": "passwordText"; "passwordErrorRequiredText": "passwordErrorRequiredText"; "passwordConfirmationText": "passwordConfirmationText"; "passwordConfirmationErrorRequiredText": "passwordConfirmationErrorRequiredText"; "passwordErrorMatchText": "passwordErrorMatchText"; "logoUrl": "logoUrl"; "appearance": "appearance"; "tosUrl": "tosUrl"; "privacyPolicyUrl": "privacyPolicyUrl"; }, { "onLoginRequested": "onLoginRequested"; "onSuccess": "onSuccess"; "onError": "onError"; }, never, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmd4LWF1dGgtZmlyZWJhc2V1aS1yZWdpc3Rlci5jb21wb25lbnQuZC50cyIsInNvdXJjZXMiOlsibmd4LWF1dGgtZmlyZWJhc2V1aS1yZWdpc3Rlci5jb21wb25lbnQuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFDQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEV2ZW50RW1pdHRlciwgT25EZXN0cm95LCBPbkluaXQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEZvcm1CdWlsZGVyLCBGb3JtR3JvdXAsIFZhbGlkYXRvckZuIH0gZnJvbSAnQGFuZ3VsYXIvZm9ybXMnO1xuaW1wb3J0IHsgU3Vic2NyaXB0aW9uIH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBBdXRoUHJvY2Vzc1NlcnZpY2UgfSBmcm9tICcuLi8uLi9zZXJ2aWNlcy9hdXRoLXByb2Nlc3Muc2VydmljZSc7XG5pbXBvcnQgeyBNYXRGb3JtRmllbGRBcHBlYXJhbmNlIH0gZnJvbSAnQGFuZ3VsYXIvbWF0ZXJpYWwvZm9ybS1maWVsZCc7XG5pbXBvcnQgeyBUaGVtZVBhbGV0dGUgfSBmcm9tICdAYW5ndWxhci9tYXRlcmlhbC9jb3JlJztcbmV4cG9ydCBkZWNsYXJlIGNvbnN0IGNvbmZpcm1QYXNzd29yZFZhbGlkYXRvcjogVmFsaWRhdG9yRm47XG5leHBvcnQgZGVjbGFyZSBjbGFzcyBOZ3hBdXRoRmlyZWJhc2V1aVJlZ2lzdGVyQ29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0LCBPbkRlc3Ryb3kge1xuICAgIHByaXZhdGUgcGxhdGZvcm1JZDtcbiAgICBwcml2YXRlIGZvcm1CdWlsZGVyO1xuICAgIGF1dGhQcm9jZXNzOiBBdXRoUHJvY2Vzc1NlcnZpY2U7XG4gICAgbG9nb1VybDogc3RyaW5nO1xuICAgIGFwcGVhcmFuY2U6IE1hdEZvcm1GaWVsZEFwcGVhcmFuY2U7XG4gICAgdG9zVXJsOiBzdHJpbmc7XG4gICAgcHJpdmFjeVBvbGljeVVybDogc3RyaW5nO1xuICAgIHRpdGxlVGV4dDogc3RyaW5nO1xuICAgIHJlYWRBbmRBY2NlcHRUZXh0OiBzdHJpbmc7XG4gICAgdGVybXNBbmRDb25kaXRpb25zVGV4dDogc3RyaW5nO1xuICAgIHByaXZhY3lQb2xpY3lUZXh0OiBzdHJpbmc7XG4gICAgY3JlYXRlQWNjb3VudEJ1dHRvblRleHQ6IHN0cmluZztcbiAgICBhbHJlYWR5SGF2ZUFjY291bnRUZXh0OiBzdHJpbmc7XG4gICAgbG9naW5CdXR0b25UZXh0OiBzdHJpbmc7XG4gICAgbmFtZVRleHQ6IHN0cmluZztcbiAgICBuYW1lRXJyb3JSZXF1aXJlZFRleHQ6IHN0cmluZztcbiAgICBlbWFpbFRleHQ6IHN0cmluZztcbiAgICBlbWFpbEVycm9yUmVxdWlyZWRUZXh0OiBzdHJpbmc7XG4gICAgZW1haWxFcnJvclBhdHRlcm5UZXh0OiBzdHJpbmc7XG4gICAgcGFzc3dvcmRUZXh0OiBzdHJpbmc7XG4gICAgcGFzc3dvcmRFcnJvclJlcXVpcmVkVGV4dDogc3RyaW5nO1xuICAgIHBhc3N3b3JkQ29uZmlybWF0aW9uVGV4dDogc3RyaW5nO1xuICAgIHBhc3N3b3JkQ29uZmlybWF0aW9uRXJyb3JSZXF1aXJlZFRleHQ6IHN0cmluZztcbiAgICBwYXNzd29yZEVycm9yTWF0Y2hUZXh0OiBzdHJpbmc7XG4gICAgb25TdWNjZXNzOiBhbnk7XG4gICAgb25FcnJvcjogYW55O1xuICAgIG9uTG9naW5SZXF1ZXN0ZWQ6IEV2ZW50RW1pdHRlcjx2b2lkPjtcbiAgICByZWdpc3RlckZvcm06IEZvcm1Hcm91cDtcbiAgICBvbkVycm9yU3Vic2NyaXB0aW9uOiBTdWJzY3JpcHRpb247XG4gICAgYXV0aGVudGljYXRpb25FcnJvcjogYm9vbGVhbjtcbiAgICBwcml2YXRlIHVuc3Vic2NyaWJlQWxsO1xuICAgIGNvbnN0cnVjdG9yKHBsYXRmb3JtSWQ6IE9iamVjdCwgZm9ybUJ1aWxkZXI6IEZvcm1CdWlsZGVyLCBhdXRoUHJvY2VzczogQXV0aFByb2Nlc3NTZXJ2aWNlKTtcbiAgICBnZXQgY29sb3IoKTogc3RyaW5nIHwgVGhlbWVQYWxldHRlO1xuICAgIGdldCBjb2xvckFjY2VudCgpOiBzdHJpbmcgfCBUaGVtZVBhbGV0dGU7XG4gICAgbmdPbkluaXQoKTogdm9pZDtcbiAgICAvKipcbiAgICAgKiBPbiBkZXN0cm95XG4gICAgICovXG4gICAgbmdPbkRlc3Ryb3koKTogdm9pZDtcbiAgICBjcmVhdGVBY2NvdW50KCk6IFByb21pc2U8dm9pZD47XG59XG4iXX0=